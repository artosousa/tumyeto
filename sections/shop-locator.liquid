<link href="https://api.mapbox.com/mapbox-gl-js/v3.9.3/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v3.9.3/mapbox-gl.js" ></script>
<div class="shop_locator__wrapper">
  <div id="map" style="height: 80vh; width: 100%;"></div>
  <div id="search-container" style="margin: 20px; display: flex; justify-content: center;">
      <input 
          id="search-input" 
          type="text" 
          placeholder="Enter store name or address..." 
          style="width: 300px; padding: 10px; font-size: 16px;">
      <button id="search-button" style="padding: 10px; margin-left: 10px; font-size: 16px;">Search</button>
      <button id="clear-button" style="padding: 10px; margin-left: 10px; font-size: 16px;">Clear</button>
  </div>
</div>

<script>
    if (typeof mapboxgl !== 'undefined') {
        mapboxgl.accessToken = {{ settings.map_api | json }};
        const map = new mapboxgl.Map({
            container: 'map', // container ID
            style: 'mapbox://styles/mapbox/outdoors-v12',
            center: [-98.5795, 39.8283], // starting position [lng, lat]
            zoom: 5, // starting zoom,
            scrollZoom: false
        });

        const markers = []; // Array to store all markers

        // Function to get coordinates using the Mapbox Geocoding API
        async function getCoordinates(address) {
            const geocodeUrl = `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(address)}.json?access_token=${mapboxgl.accessToken}`;
            const response = await fetch(geocodeUrl);
            const data = await response.json();
            if (data.features && data.features.length > 0) {
                return data.features[0].geometry.coordinates; // Returns [lng, lat]
            } else {
                console.error('Geocoding failed for address:', address);
                return null;
            }
        }

        // Function to filter map based on search query
        function filterMarkers(query) {
            query = query.toLowerCase();
            markers.forEach(markerData => {
                const { marker, storeName, address } = markerData;
                if (
                    storeName.toLowerCase().includes(query) ||
                    address.toLowerCase().includes(query)
                ) {
                    marker.getElement().style.display = ''; // Show marker
                } else {
                    marker.getElement().style.display = 'none'; // Hide marker
                }
            });
        }

        // Function to reset all markers (clear filter)
        function resetMarkers() {
            markers.forEach(markerData => {
                markerData.marker.getElement().style.display = ''; // Show all markers
            });
            document.getElementById('search-input').value = ''; // Clear search input
        }

        // Add search event listener
        document.getElementById('search-button').addEventListener('click', () => {
            const query = document.getElementById('search-input').value;
            filterMarkers(query);
        });

        // Add event listener for "Enter" key on the search input field
        document.getElementById('search-input').addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                const query = document.getElementById('search-input').value;
                filterMarkers(query);
            }
        });
        
        // Add clear/reset event listener
        document.getElementById('clear-button').addEventListener('click', resetMarkers);

        // Iterate through each block and add a marker for each store
        {% for block in section.blocks %}
            (function() {
                const storeName = {{ block.settings.store_name | json }};
                const address = {{ block.settings.address | json }};

                // Get coordinates for the store address
                getCoordinates(address).then(coordinates => {
                    if (coordinates) {
                        // Create a marker for the store
                        const marker = new mapboxgl.Marker()
                            .setLngLat(coordinates)
                            .setPopup(new mapboxgl.Popup().setHTML(`<strong>${storeName}</strong><br>${address}`)) // Optional popup with store info
                            .addTo(map);

                        // Store marker data for filtering
                        markers.push({ marker, storeName, address });
                    }
                }).catch(error => {
                    console.error('Error adding marker for store:', storeName, error);
                });
            })();
        {% endfor %}
    } else {
        console.error('Mapbox GL JS failed to load.');
    }
</script>

{% style %}
  .shop_locator__wrapper{
    position:relative;
  }
  #map {
    height: 80vh;
    width: 100%;
  }
  #search-container {
    position: absolute;
    top: 10px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1;
    background: white;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 10px;
  }
{% endstyle %}

{% schema %}
{
  "name": "Store Locator Map",
  "settings": [
    {
      "type": "text",
      "id": "map_api",
      "label": "Mapbox API Key"
    }
  ],
  "blocks": [
    {
      "type": "store",
      "name": "Store",
      "settings": [
        {
          "type": "text",
          "id": "store_name",
          "label": "Store Name"
        },
        {
          "type": "text",
          "id": "address",
          "label": "Full Address"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Store Locator Map"
    }
  ]
}
{% endschema %}
